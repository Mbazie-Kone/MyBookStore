services:
  # SQL Server
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver_mbk
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "a123456789A!"
    ports:
      - "1433:1433"
    volumes:
      - ./sqlserver_data:/var/opt/mssql  # Map the local ./data folder for persistence
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'a123456789A!' -Q 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service
  user-service:
    build:
      context: ./user-service
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:sqlserver://sqlserver_mbk:1433;databaseName=userdb
      SPRING_DATASOURCE_USERNAME: sa
      SPRING_DATASOURCE_PASSWORD: a123456789A!
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      user-service:
        condition: service_healthy
    networks:
      - microservices-network
      
  # Frontend Angular
  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - "4200:80"
    environment:
      API_URL: http://api-gateway:8080/api
    depends_on:
      - api-gateway
    networks:
      - microservices-network

# Defining Docker networking to enable communication between containers
networks:
  microservices-network:
    driver: bridge

